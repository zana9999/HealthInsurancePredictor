# -*- coding: utf-8 -*-
"""healthinsurancepredictor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kG2RhKQ2BF5hOjMa59K9ht-dahZXMY7A
"""

# --------------------------- IMPORT LIBRARIES ------------------------------
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from google.colab import files

# --------------------------- LOAD DATA -------------------------------------
files.upload()
df = pd.read_csv("insurance.csv")
df.head()

# --------------------------- DATA CLEANING & PROCESSING -------------------
#changing smoker and gender to have binary values
df['smoker'] = df['smoker'].map({'no': 0, 'yes': 1})
df['sex'] = df['sex'].map({'male': 0, 'female': 1})

#reflects the correlation between the parameters and insurance charges
df.select_dtypes(include=['number']).corr()["charges"]

#visually see smoker vs. insurance charges
sns.boxplot(x='smoker', y='charges', data=df)
plt.xticks([0,1], ['No', 'Yes'])
plt.show()

#visually see age vs. insurance charges
sns.lmplot(x="age", y="charges", data=df, fit_reg=True, ci=None)

#reflects how balanced the insurance charge column is
df.plot.hist(y="charges")

#showcases if any rows have missing values
df[df.isnull().any(axis=1)]
df = df.dropna() #removes the empty rows

#interaction terms
df['smoker_bmi'] = df['smoker'] * df['bmi']
df['smoker_age'] = df['smoker'] * df['age']

# --------------------------- PREDICTORS & TARGET --------------------------
predictors = ['smoker', 'age', 'bmi', 'smoker_bmi', 'smoker_age']
X = df[predictors]
y = df['charges']

# --------------------------- TRAIN-TEST SPLIT -----------------------------
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# --------------------------- LINEAR REGRESSION MODEL ----------------------
reg = LinearRegression()
reg.fit(X_train[predictors], y_train)
predictions = reg.predict(X_test[predictors])
X_test["predictions"] = predictions

# --------------------------- PREDICTIONS & COMPARISON ---------------------
X_test_with_pred = X_test.copy()
X_test_with_pred["predictions"] = predictions
X_test_with_pred["charges"] = y_test
# clean up index
X_test_with_pred = X_test_with_pred.reset_index(drop=True)
print(X_test_with_pred.head())
X_test["predictions"] = X_test["predictions"].round()

#error shows by how much the predictions may be off by
error = mean_absolute_error(X_test["predictions"], y_test)
print(error)

#percentage form of the error
percentage_error = (2858.39 / y_test.mean()) * 100
print(f"Average prediction error: {percentage_error:.2f}%")

#scatter plot
plt.scatter(y_test, predictions)
plt.xlabel("Actual Charges")
plt.ylabel("Predicted Charges")
plt.title("Actual vs Predicted")
plt.show()

df.describe()["charges"]

X_test_with_pred[X_test_with_pred["smoker"]== 1]

#scatter plot of predictions vs actual insurance charges
plt.figure(figsize=(8,6))
sns.scatterplot(x='charges', y='predictions', data=X_test_with_pred)
plt.plot([X_test_with_pred['charges'].min(), X_test_with_pred['charges'].max()],
         [X_test_with_pred['charges'].min(), X_test_with_pred['charges'].max()],
         color='red', linestyle='--')  # 45-degree line for perfect prediction
plt.xlabel("Actual Charges")
plt.ylabel("Predicted Charges")
plt.title("Actual vs Predicted Charges")
plt.show()

#check correlation between predictions and health insurance charges
X_test_with_pred.corr()[['predictions','charges']]

# --------------------------- ERROR ANALYSIS -------------------------------
# Add error columns
X_test_with_pred['error'] = X_test_with_pred['predictions'] - X_test_with_pred['charges']
X_test_with_pred['abs_error'] = X_test_with_pred['error'].abs()
X_test_with_pred['percent_error'] = X_test_with_pred['abs_error'] / X_test_with_pred['charges'] * 100

#grouping the errors by age group
X_test_with_pred['age_group'] = pd.cut(X_test_with_pred['age'], bins=[0,30,50,70])
X_test_with_pred.groupby('age_group')[['abs_error','percent_error']].mean()

#grouping the errors by smoking vs non smoking person
X_test_with_pred.groupby('smoker')[['abs_error','percent_error']].mean()

# --------------------------- METRICS --------------------------------------
# 1. R-squared
r2 = r2_score(y_test, predictions)
# 2. Mean Absolute Error (MAE)
mae = mean_absolute_error(y_test, predictions)
# 3. Root Mean Squared Error (RMSE)
rmse = np.sqrt(mean_squared_error(y_test, predictions))
# 4. Average Percent Error
percent_error = np.mean(np.abs((y_test - predictions) / y_test)) * 100
print(f"R-squared (Explained Variance): {r2:.3f}")
print(f"Mean Absolute Error (MAE): ${mae:.2f}")
print(f"Root Mean Squared Error (RMSE): ${rmse:.2f}")
print(f"Average Percent Error: {percent_error:.2f}%")
